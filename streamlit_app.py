# ===========================================
# ROUND-ROBIN SEATING ‚Äî STREAMLIT APP (FINAL ALWAYS PASS)
# ===========================================
# pip install streamlit pandas matplotlib

import math, random
from dataclasses import dataclass
from typing import List, Tuple, Dict, Set
from collections import defaultdict

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# ---------- Core ----------

@dataclass
class InitParams:
    n: int
    parity: str
    D: int

def init_params(n: int) -> InitParams:
    assert n >= 3
    return InitParams(n=n,
                      parity=("odd" if n % 2 else "even"),
                      D=((n - 1) // 2 if n % 2 else n // 2))

def wrap(x: int, N: int) -> int:
    return ((x - 1) % N) + 1

def edges_from_cycle(order: List[int]) -> Set[Tuple[int, int]]:
    E: Set[Tuple[int, int]] = set()
    n = len(order)
    for i in range(n):
        u, v = order[i], order[(i + 1) % n]
        E.add((u, v) if u < v else (v, u))
    return E

# ---------- Sinh l·ªãch ----------

def generate_schedule_odd(n: int) -> List[List[int]]:
    """Walecki decomposition cho n l·∫ª: m·ªói c·∫∑p xu·∫•t hi·ªán ƒë√∫ng 1 l·∫ßn."""
    assert n % 2 == 1
    m = (n - 1) // 2
    g = n - 1
    days: List[List[int]] = []
    for k in range(m):
        cyc = [g]
        for j in range(1, m + 1):
            a = (k + j - 1) % (2 * m)
            b = (k - j) % (2 * m)
            cyc += [a, b]
        days.append(cyc)
    return days

def generate_schedule_even(n: int) -> List[List[int]]:
    """Round-Robin 'Circle Method' cho n ch·∫µn."""
    assert n % 2 == 0
    players = list(range(n))
    D = n // 2
    days: List[List[int]] = []

    for d in range(D):
        row = players[:]
        order = []
        left, right = 0, n - 1
        while left < right:
            order.append(row[left])
            order.append(row[right])
            left += 1
            right -= 1
        days.append(order)
        players = [players[0]] + players[-1:] + players[1:-1]
    return days

def generate_schedule(n: int) -> List[List[int]]:
    return generate_schedule_odd(n) if n % 2 == 1 else generate_schedule_even(n)

# ---------- Ki·ªÉm ch·ª©ng ----------

def count_pair_coverage(days: List[List[int]]) -> Dict[Tuple[int, int], int]:
    counts: Dict[Tuple[int, int], int] = defaultdict(int)
    for order in days:
        for e in edges_from_cycle(order):
            counts[e] += 1
    return counts

def verify_coverage(n: int, pair_counts: Dict[Tuple[int, int], int]) -> Tuple[bool, list[Tuple[int,int]]]:
    need_exact_one = (n % 2 == 1)
    missing = []
    for u in range(n):
        for v in range(u + 1, n):
            c = pair_counts.get((u, v), 0)
            if need_exact_one:
                if c != 1:
                    missing.append((u, v))
            else:
                if c < 1:
                    missing.append((u, v))
    return (len(missing) == 0, missing)

# ---------- Extended Repair ----------

def score_order(order: List[int], need: Set[Tuple[int,int]]) -> int:
    return sum(1 for e in edges_from_cycle(order) if e in need)

def improve_one_day(order: List[int], need: Set[Tuple[int,int]], tries: int = 800) -> List[int]:
    best = order[:]; best_sc = score_order(best, need)
    n = len(order)
    for _ in range(tries):
        i, j = random.sample(range(n), 2)
        cand = best[:]
        cand[i], cand[j] = cand[j], cand[i]
        sc = score_order(cand, need)
        if sc > best_sc:
            best, best_sc = cand, sc
    return best

def extended_repair(days: List[List[int]], missing: List[Tuple[int,int]],
                    passes: int = 3, tries_per_day: int = 800) -> List[List[int]]:
    if not missing: return days
    random.seed(42)
    need = set(tuple(sorted(e)) for e in missing)
    best = [d[:] for d in days]

    def left_missing(DAYS):
        pc = count_pair_coverage(DAYS)
        return sum(1 for e in need if pc.get(e, 0) == 0)

    best_left = left_missing(best)
    for _ in range(passes):
        improved = False
        for di in range(len(best)):
            cand = best[:]
            cand[di] = improve_one_day(cand[di], need, tries=tries_per_day)
            left = left_missing(cand)
            if left < best_left:
                best, best_left, improved = cand, left, True
        if not improved: break
    return best

# ---------- Th√™m ng√†y ho√†n t·∫•t ----------

def add_completion_day(n: int, days: List[List[int]], missing: List[Tuple[int,int]]) -> List[List[int]]:
    need = set(tuple(sorted(e)) for e in missing)
    if not need: return days
    deg = defaultdict(int)
    for u, v in need:
        deg[u] += 1; deg[v] += 1
    start = max(range(n), key=lambda x: deg.get(x, 0))
    order = [start]; used = {start}
    while len(order) < n:
        cur = order[-1]
        cand = [v for (u,v) in need if u == cur and v not in used] + \
               [u for (u,v) in need if v == cur and u not in used]
        if not cand: cand = [v for v in range(n) if v not in used]
        nxt = max(cand, key=lambda x: deg.get(x, 0))
        order.append(nxt); used.add(nxt)
    return days + [order]

# ---------- DataFrames & Plot ----------

def df_days(days: List[List[int]]) -> pd.DataFrame:
    df = pd.DataFrame(days)
    df.index = [f"Day {i}" for i in range(1, len(days)+1)]
    df.columns = [f"Seat {j}" for j in range(len(days[0]))]
    return df

def df_pairs_by_day(days: List[List[int]]) -> pd.DataFrame:
    rows = []
    for d, order in enumerate(days, 1):
        for (u, v) in sorted(edges_from_cycle(order)):
            rows.append({"Day": d, "Pair": f"({u},{v})"})
    return pd.DataFrame(rows)

def df_pair_counts(n: int, pair_counts: Dict[Tuple[int,int], int]) -> pd.DataFrame:
    rows = [{"Pair": f"({u},{v})", "Count": pair_counts.get((u, v), 0)}
            for u in range(n) for v in range(u+1, n)]
    df = pd.DataFrame(rows).sort_values(["Count","Pair"], ascending=[False, True]).reset_index(drop=True)
    return df

def plot_circle(order: List[int]):
    n = len(order); r = 1.0
    ang = [2*math.pi * i / n for i in range(n)]
    xs = [r*math.cos(a) for a in ang]; ys = [r*math.sin(a) for a in ang]
    fig, ax = plt.subplots(figsize=(5,5))
    for i,(x,y) in enumerate(zip(xs,ys)):
        ax.scatter(x,y)
        ax.text(x,y,str(order[i]),ha="center",va="center",
                fontsize=10,bbox=dict(boxstyle="round,pad=0.2",fc="white",ec="gray"))
    for i in range(n):
        j=(i+1)%n; ax.plot([xs[i],xs[j]],[ys[i],ys[j]],alpha=0.6)
    ax.set_aspect("equal"); ax.axis("off")
    return fig

# ---------- Giao di·ªán ----------

st.set_page_config(page_title="Round-robin Seating", layout="wide")
st.title("ü™ë X·∫øp ch·ªó v√≤ng tr√≤n ‚Äì By Bui Quang Thai")
st.caption("ƒê·∫£m b·∫£o: m·ªçi c·∫∑p ng∆∞·ªùi ƒë·ªÅu t·ª´ng ng·ªìi k·ªÅ nhau (n l·∫ª: m·ªói c·∫∑p ƒë√∫ng 1 l·∫ßn; n ch·∫µn: m·ªói c·∫∑p ‚â• 1 l·∫ßn). App t·ª± ƒë·ªông Repair ho·∫∑c th√™m ng√†y ho√†n t·∫•t ƒë·∫øn khi PASS ‚úÖ.")

with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    n = st.number_input("S·ªë ng∆∞·ªùi (n ‚â• 3)", min_value=3, value=10, step=1)
    auto_repair = st.checkbox("Th·ª≠ Repair n·∫øu thi·∫øu (s·ª≠a nhi·ªÅu ng√†y)", value=True)
    passes = st.slider("S·ªë l∆∞·ª£t qu√©t Repair", 1, 6, 3)
    tries = st.slider("S·ªë l·∫ßn ho√°n v·ªã / ng√†y", 100, 2000, 800, 100)
    allow_extra_days = st.checkbox("T·ª± th√™m 'ng√†y ho√†n t·∫•t' ƒë·∫øn khi PASS", value=True)
    max_extra_days = st.slider("Gi·ªõi h·∫°n ng√†y th√™m t·ªëi ƒëa", 0, 30, 10)
    show_circle = st.checkbox("V·∫Ω v√≤ng tr√≤n minh ho·∫° cho 1 ng√†y", value=True)
    day_to_plot = st.number_input("Ch·ªçn ng√†y ƒë·ªÉ v·∫Ω", min_value=1, value=1, step=1)
    st.markdown("---"); st.caption("Made with ‚ù§Ô∏è Streamlit")

# A) Init
params = init_params(int(n))
is_odd = (params.n % 2 == 1)

# B) Generate
days = generate_schedule(params.n)
pair_counts = count_pair_coverage(days)
passed, missing = verify_coverage(params.n, pair_counts)

# C) X·ª≠ l√Ω t·ª± ƒë·ªông
if not is_odd:  # ch·ªâ can thi·ªáp khi n ch·∫µn
    if auto_repair and not passed:
        days = extended_repair(days, missing, passes=passes, tries_per_day=tries)
        pair_counts = count_pair_coverage(days)
        passed, missing = verify_coverage(params.n, pair_counts)

    extra_days_used = 0
    while (not passed) and allow_extra_days and extra_days_used < max_extra_days:
        days = add_completion_day(params.n, days, missing)
        pair_counts = count_pair_coverage(days)
        passed, missing = verify_coverage(params.n, pair_counts)
        extra_days_used += 1

# D) Hi·ªÉn th·ªã
c1, c2, c3, c4 = st.columns(4)
c1.metric("n (ng∆∞·ªùi)", params.n)
c2.metric("S·ªë ng√†y l√Ω thuy·∫øt", params.D)
c3.metric("Parity", params.parity.upper())
c4.metric("Bao ph·ªß", "PASSED ‚úÖ" if passed else "NOT PASSED ‚ùå")

st.subheader("üìÖ L·ªãch ng·ªìi theo ng√†y (Days√óSeats)")
st.dataframe(df_days(days), use_container_width=True)

st.subheader("ü§ù C√°c c·∫∑p k·ªÅ theo t·ª´ng ng√†y (Pairs_by_Day)")
st.dataframe(df_pairs_by_day(days), use_container_width=True, height=300)

st.subheader("üìà B·∫£ng ƒë·∫øm bao ph·ªß (PairCounts)")
st.dataframe(df_pair_counts(params.n, pair_counts), use_container_width=True, height=360)

# E) Minh ho·∫°
if show_circle:
    d_idx = int(day_to_plot) - 1
    if 0 <= d_idx < len(days):
        st.subheader(f"üü¢ Minh ho·∫° v√≤ng tr√≤n ‚Äì Ng√†y {day_to_plot}")
        st.pyplot(plot_circle(days[d_idx]))
    else:
        st.info("Ch·ªçn ng√†y h·ª£p l·ªá ƒë·ªÉ v·∫Ω.")
